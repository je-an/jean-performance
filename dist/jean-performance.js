!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():(e.Performance=e.Performance||{},e.Performance=t())}(this,function(){var e,t;return function(n){function r(e){for(var t=0,n=[];t<e.length;t++){var r=a.resolved[e[t]];r&&n.push(r)}return n}function i(){for(var e in a.unresolved){var t=a.unresolved[e],n=r(t.dependencies);s(e,t.factory,t.dependencies,n,!1)}}function s(e,t,n,r,i){r.length===n.length?a.resolved[e]=t.apply(t,r):i&&(a.unresolved[e]={dependencies:n,factory:t})}var a={resolved:{},unresolved:{}};t=function(e,t,n){return a.resolved[e]?void console.warn("There is already a module with id <"+e+"> defined. Therefore this module will be ignored"):"string"==typeof e&&Array.isArray(t)&&"function"==typeof n?(0===t.length?s(e,n,t,[],!1):s(e,n,t,r(t),!0),void i()):void console.warn("Passed arguments for module are invalid")},t.amd={},e=function(e,t){e=Array.isArray(e)?e:[e];var n=r(e);if(1===n.length&&!t)return n[0];if(n.length!==e.length||!t)throw new Error("Not all modules are resolved");t.apply(t,n)}}(),t("node_modules/jean-amd/dist/jean-amd",function(){}),t("src/Performance",[],function(){return{_isStartCalledFirst:!1,measurementUnit:{MILLISECOND:0,SECOND:1},options:{measurementUnit:1,printMeasurementResult:!0,decimalPlace:2},displayString:"",startValue:null,endValue:null,configure:function(e){var t=this.options;e=e||{},t.measurementUnit=e.measurementUnit===this.measurementUnit.SECOND||e.measurementUnit===this.measurementUnit.MILLISECOND?e.measurementUnit:t.measurementUnit,t.printMeasurementResult="boolean"==typeof e.printMeasurementResult?e.printMeasurementResult:t.printMeasurementResult,t.decimalPlace="number"==typeof e.decimalPlace?e.decimalPlace:t.decimalPlace,t.onMeasurementFinished="function"==typeof e.onMeasurementFinished?e.onMeasurementFinished:function(){}},startMeasurement:function(){return this.startValue=performance.now(),this._isStartCalledFirst=!0,this._isStartCalledFirst},stopMeasurement:function(){var e,t=this.options,n=this.startValue,r=this.endValue,i=this.measurementUnit,s=this.displayString,a=this.options.onMeasurementFinished;if(!this._isStartCalledFirst)throw new Error("startMeasurement need to be called first");switch(r=performance.now(),t.measurementUnit){case i.MILLISECOND:e=(r-n).toFixed(t.decimalPlace),s="Measured time: "+e+" milliseconds.";break;case i.SECOND:e=((r-n)/1e3).toFixed(t.decimalPlace),s="Measured time: "+e+" seconds."}return t.printMeasurementResult&&console.log(s),a(parseFloat(e)),this.displayString="",this.startValue=null,this.endValue=null,this._isStartCalledFirst=!1,!0}}}),e("src/Performance")});